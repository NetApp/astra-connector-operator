apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: neptune
    control-plane: controller-manager
  name: neptune-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: applications.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: Application
    listKind: ApplicationList
    plural: applications
    singular: application
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Application is the Schema for the applications API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ApplicationSpec defines the desired state of Application
            properties:
              includedClusterScopedResources:
                description: IncludedClusterScopedResources is a list of cluster-scoped resource types to be included.
                items:
                  properties:
                    groupVersionKind:
                      description: GroupVersionKind unambiguously identifies a kind
                      properties:
                        group:
                          type: string
                        kind:
                          type: string
                        version:
                          type: string
                      type: object
                    labelSelector:
                      description: A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                          items:
                            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                          type: object
                      type: object
                      x-kubernetes-map-type: atomic
                  type: object
                type: array
              includedNamespaces:
                description: IncludedNamespaces is a slice of namespaceSelectors to include in our app definition. If empty, all namespaces are included.
                items:
                  properties:
                    labelSelector:
                      description: A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                          items:
                            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                          type: object
                      type: object
                      x-kubernetes-map-type: atomic
                    namespace:
                      type: string
                  required:
                  - namespace
                  type: object
                nullable: true
                type: array
            type: object
          status:
            description: ApplicationStatus defines the observed state of Application
            properties:
              conditions:
                description: Each Condition contains details for one aspect of the current state of the Application.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              protectionState:
                description: 'ProtectionState determines protection state of the app based upon different parameters The current logic for protectionState is as follows: Fully Protected: someScheduleIsActive && hasScheduleWithSuccessfulLastBackup Partially Protected: someScheduleIsActive || someSuccessfulBackupExists || someSuccessfulSnapshotExists Not Protected: default'
                type: string
            required:
            - conditions
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: appmirrorrelationships.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: AppMirrorRelationship
    listKind: AppMirrorRelationshipList
    plural: appmirrorrelationships
    shortNames:
    - amr
    singular: appmirrorrelationship
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .status.error
      name: Error
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: AppMirrorRelationship is the Schema for the appmirrorrelationships API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: AppMirrorRelationshipSpec defines the desired state of AppMirrorRelationship
            properties:
              applicationRef:
                description: ApplicationRef is the name of the Application
                type: string
              desiredState:
                description: DesiredState is the desired state of the AppMirrorRelationship
                enum:
                - established
                - promoted
                type: string
              destinationAppVaultRef:
                description: DestinationAppVaultRef is the name of the destination AppVault
                type: string
              namespaceMapping:
                description: NamespaceMapping is the mapping between source namespace to target namespace
                items:
                  properties:
                    source:
                      description: Source  namespace of a single resource in the collection
                      type: string
                    target:
                      description: Target namespace where the single resource will be cloned into
                      type: string
                  required:
                  - source
                  - target
                  type: object
                type: array
              promotedSnapshot:
                description: PromotedSnapshot is the snapshot name to use during a planned fail over
                type: string
              recurrenceRule:
                description: RecurrenceRule is a string containing an RFC-5545 Section 3.8.5.3. Recurrence Rule. For the DTSTART parameter, only UTC timestamps (denoted by the "Z" suffix) are supported, and only timestamps before the current time are supported. For the RECUR rule parts, "FREQ" and "INTERVAL" are the only rule parts supported. For the FREQ rule part, "MINUTELY" and "HOURLY" are the only values supported.
                type: string
              sourceAppVaultRef:
                description: SourceAppVaultRef is the name of the source AppVault
                type: string
              sourceSnapshotsPath:
                description: SourceSnapshotsPath is the name of the source app snapshots path
                type: string
              storageClassName:
                description: StorageClassName is the name of the StorageClass to use when creating new PVCs
                type: string
            required:
            - applicationRef
            - desiredState
            - destinationAppVaultRef
            - recurrenceRule
            - sourceAppVaultRef
            - sourceSnapshotsPath
            type: object
          status:
            description: AppMirrorRelationshipStatus defines the observed state of AppMirrorRelationship
            properties:
              conditions:
                description: Each Condition contains details for one aspect of the current state of the AppMirrorRelationship
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              error:
                description: Error indicates the most recent error that has occurred. The error may not be permanent, so progress may continue after temporarily seeing an error.
                type: string
              state:
                description: State indicates the current state of the AppMirrorRelationship
                type: string
            required:
            - conditions
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: appmirrorupdates.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: AppMirrorUpdate
    listKind: AppMirrorUpdateList
    plural: appmirrorupdates
    shortNames:
    - amu
    singular: appmirrorupdate
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .status.error
      name: Error
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: AppMirrorUpdate is the Schema for the appmirrorupdates API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: AppMirrorUpdateSpec defines the desired state of AppMirrorUpdate
            properties:
              appMirrorRelationshipRef:
                description: Name of the owning AppMirrorRelationship
                minLength: 1
                type: string
              applicationRef:
                description: Name of the Application
                minLength: 1
                type: string
              destinationAppVaultRef:
                description: Name of the DestinationAppVault
                minLength: 1
                type: string
              sourceAppArchivePath:
                description: Name of the source app archive path
                minLength: 1
                type: string
              sourceAppVaultRef:
                description: Name of the SourceAppVault
                minLength: 1
                type: string
            required:
            - appMirrorRelationshipRef
            - applicationRef
            - destinationAppVaultRef
            - sourceAppArchivePath
            - sourceAppVaultRef
            type: object
          status:
            description: AppMirrorUpdateStatus defines the observed state of AppMirrorUpdate
            properties:
              appArchivePath:
                description: AppArchivePath is the path where the snapshot was archived in the destination AppVault.
                type: string
              completionTimestamp:
                description: CompletionTimestamp records the time the AppMirrorUpdate completed. The server's time is used for CompletionTimestamps
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Each Condition contains details for one aspect of the current state of the AppMirrorUpdate.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              destinationVolumes:
                description: Each AppMirrorUpdateDestinationVolume contains details for one destination volume that the AppMirrorUpdate targets.
                items:
                  properties:
                    destinationPVC:
                      description: DestinationPVC holds the namespace and name for the destination PVC
                      properties:
                        name:
                          type: string
                        namespace:
                          type: string
                      required:
                      - name
                      - namespace
                      type: object
                    destinationStorageClass:
                      description: DestinationStorageClass holds the storage class for the destination PVC
                      type: string
                    destinationTAMU:
                      description: DestinationTAMU holds the namespace and name for the TAMUs created at the destination site
                      properties:
                        name:
                          type: string
                        namespace:
                          type: string
                      required:
                      - name
                      - namespace
                      type: object
                    destinationTMR:
                      description: DestinationTMR holds the namespace and name for the destination TMR
                      properties:
                        name:
                          type: string
                        namespace:
                          type: string
                      required:
                      - name
                      - namespace
                      type: object
                    newlyReplicated:
                      description: NewlyReplicated will be set to true if the destination PVC did not already exist
                      type: boolean
                    sourcePVC:
                      description: SourcePVC holds the namespace and name for the source PVC
                      properties:
                        name:
                          type: string
                        namespace:
                          type: string
                      required:
                      - name
                      - namespace
                      type: object
                  required:
                  - destinationPVC
                  - destinationTMR
                  - newlyReplicated
                  - sourcePVC
                  type: object
                type: array
              error:
                description: Error indicates the most recent error that has occurred. The error may not be permanent, so progress may continue after temporarily seeing an error.
                type: string
              state:
                description: State indicates a high level summary of the AppMirrorUpdate's state
                type: string
            required:
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: appvaults.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: AppVault
    listKind: AppVaultList
    plural: appvaults
    singular: appvault
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: AppVault is the Schema for the appvaults API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: AppVaultSpec defines the desired state of AppVault
            properties:
              prefix:
                description: Prefix is an optional path which will be prefixed to the names of all entities stored in the vault.
                type: string
              providerConfig:
                additionalProperties:
                  type: string
                description: ProviderConfig stores the configuration necessary to access the AppVault using the specified provider.
                type: object
              providerCredentials:
                additionalProperties:
                  properties:
                    valueFromSecret:
                      description: ValueFromSecret indicates that the credential value should come from a secret.
                      properties:
                        key:
                          description: The key of the secret to select from. Must be a valid secret key.
                          type: string
                        name:
                          description: Name of the secret containing the value for this field. Must be in the same namespace.
                          type: string
                      required:
                      - key
                      - name
                      type: object
                  required:
                  - valueFromSecret
                  type: object
                description: ProviderCredentials stores references to any credentials required to access the AppVault using the specified provider.
                type: object
              providerType:
                description: ProviderType determines what provides the backup, e.g. S3 or FileSystem
                type: string
            required:
            - providerConfig
            - providerType
            type: object
          status:
            description: AppVaultStatus defines the observed state of AppVault
            properties:
              error:
                type: string
              state:
                type: string
              uid:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: autosupportbundles.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: AutoSupportBundle
    listKind: AutoSupportBundleList
    plural: autosupportbundles
    singular: autosupportbundle
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: AutoSupportBundle is the Schema for the autosupportbundles API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: AutoSupportBundleSpec defines the desired state of AutoSupportBundle
            properties:
              dateWindowStart:
                description: DateWindowStart is a timestamp indicating the start time of the AutoSupport bundle data collection window.  Defaults to 24 hours ago if not specified.
                format: date-time
                type: string
              triggerType:
                description: TriggerType indicates how the AutoSupport bundle was triggered
                enum:
                - manual
                - scheduled
                type: string
            required:
            - triggerType
            type: object
          status:
            description: AutoSupportBundleStatus defines the observed state of AutoSupportBundle
            properties:
              completionTimestamp:
                description: CompletionTimestamp The time that the ASUP generation and upload completed
                format: date-time
                type: string
              generationState:
                description: GenerationState is the current state of the ASUP bundle creation
                enum:
                - alreadyInProgress
                - pending
                - running
                - completed
                - partial
                - failed
                type: string
              uploadState:
                description: UploadState is the current state of the ASUP bundle upload
                enum:
                - pending
                - blocked
                - running
                - completed
                - failed
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: autosupportbundleschedules.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: AutoSupportBundleSchedule
    listKind: AutoSupportBundleScheduleList
    plural: autosupportbundleschedules
    singular: autosupportbundleschedule
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: AutoSupportBundleSchedule is the Schema for the autosupportbundleschedules API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: AutoSupportBundleScheduleSpec defines the desired state of AutoSupportBundleSchedule
            properties:
              enabled:
                description: Enabled determines if scheduled AutoSupportBundles are run or not
                type: boolean
            type: object
          status:
            description: AutoSupportBundleScheduleStatus defines the observed state of AutoSupportBundleSchedule
            properties:
              nextScheduledTimestamp:
                description: NextScheduledTimestamp The time to run the next scheduled ASUP
                format: date-time
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: backupinplacerestores.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: BackupInplaceRestore
    listKind: BackupInplaceRestoreList
    plural: backupinplacerestores
    singular: backupinplacerestore
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .status.error
      name: Error
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: BackupInplaceRestore is the Schema for the backupinplacerestores API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: BackupInplaceRestoreSpec defines the desired state of BackupInplaceRestore
            properties:
              appArchivePath:
                description: AppArchivePath is the path inside AppVault where the snapshot contents are stored.
                type: string
              appVaultRef:
                description: AppVaultRef is the reference to the AppVault where the snapshot contents are stored.
                type: string
              namespaceMapping:
                description: NamespaceMapping is the mapping between source namespace to target namespace
                items:
                  properties:
                    source:
                      description: Source  namespace of a single resource in the collection
                      type: string
                    target:
                      description: Target namespace where the single resource will be cloned into
                      type: string
                  required:
                  - source
                  - target
                  type: object
                type: array
            type: object
          status:
            description: BackupInplaceRestoreStatus defines the observed state of BackupInplaceRestore
            properties:
              completionTimestamp:
                description: CompletionTimestamp records the time the Restore completed. The server's time is used for CompletionTimestamps
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Condition contains details for one aspect of the current state of this BackupInplaceRestore
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              error:
                description: Error indicates the most recent error that has occurred. The error may not be permanent, so progress may continue after temporarily seeing an error.
                type: string
              state:
                description: State indicates a high level summary of the BackupInplaceRestores's state
                type: string
            required:
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: backuprestores.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: BackupRestore
    listKind: BackupRestoreList
    plural: backuprestores
    singular: backuprestore
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .status.error
      name: Error
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: BackupRestore is the Schema for the backuprestores API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: BackupRestoreSpec defines the desired state of BackupRestore
            properties:
              appArchivePath:
                description: AppArchivePath is the path inside AppVault where the backup contents are stored.
                type: string
              appVaultRef:
                description: AppVaultRef is the reference to the AppVault where the backup contents are stored.
                type: string
              namespaceMapping:
                description: NamespaceMapping is the mapping between source namespace to target namespace
                items:
                  properties:
                    source:
                      description: Source  namespace of a single resource in the collection
                      type: string
                    target:
                      description: Target namespace where the single resource will be cloned into
                      type: string
                  required:
                  - source
                  - target
                  type: object
                type: array
              resourceFilter:
                description: ResourceFilter should be populated by the user if only certain resources must be restored in the target namespace
                properties:
                  resourceMatchers:
                    description: ResourceMatchers is a list of matchers where each matcher matches one or more resources
                    items:
                      properties:
                        groupKind:
                          description: GroupKind kubernetes group kind of the resource that has to be matched
                          type: string
                        labelSelector:
                          description: LabelSelector  is used to match a resource based on the metadata.labels field of the kubernetes resource
                          type: string
                        name:
                          description: Name kubernetes metadata.name field of the resource that must be matched.
                          type: string
                        namespace:
                          description: Namespace kubernetes metadata.namespace field of the resource that must be matched.
                          type: string
                        version:
                          description: Version of the kubernetes resource that has to be matched.
                          type: string
                      required:
                      - groupKind
                      type: object
                    type: array
                  resourceSelectionCriteria:
                    description: ResourceSelectionCriteria used to determine if the resources matching the provided resources matchers should be included into the collection or excluded from the collection.
                    enum:
                    - include
                    - exclude
                    type: string
                type: object
              storageClassMapping:
                description: StorageClassMapping defines a mapping from a storageClass present in the source application to the assignment in the restored application (clone)
                items:
                  properties:
                    source:
                      description: Source  storageClass that is assigned to one of the PVCs in the source application
                      type: string
                    target:
                      description: Target storageClass that is assigned to the same PVC in the cloned/restored application
                      type: string
                  required:
                  - source
                  - target
                  type: object
                type: array
            type: object
          status:
            description: BackupRestoreStatus defines the observed state of BackupRestore
            properties:
              completionTimestamp:
                description: CompletionTimestamp records the time the Restore completed. The server's time is used for CompletionTimestamps
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Each Condition contains details for one aspect of the current state of the Backup Restore.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              error:
                description: Error indicates the most recent error that has occurred. The error may not be permanent, so progress may continue after temporarily seeing an error.
                type: string
              state:
                description: 'INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file State indicates a high level summary of the Backup Restore''s state'
                type: string
            required:
            - conditions
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: backups.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: Backup
    listKind: BackupList
    plural: backups
    singular: backup
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .status.error
      name: Error
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Backup is the Schema for the backups API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: BackupSpec defines the desired state of Backup
            properties:
              appVaultRef:
                description: Name of the AppVault to use as the target of the backup
                type: string
              applicationRef:
                description: Name of the Application to back up
                type: string
              reclaimPolicy:
                description: ReclaimPolicy defines what happens to a backup when released from its claim. Valid options are Retain, Delete (default).
                type: string
              snapshotRef:
                description: Name of the Snapshot to use as the source of the Backup. If not provided, a temporary Snapshot will be created and backed up
                type: string
            required:
            - appVaultRef
            - applicationRef
            type: object
          status:
            description: BackupStatus defines the observed state of Backup
            properties:
              appArchivePath:
                description: AppArchivePath is the path where the backup was archived in the AppVault.
                type: string
              completionTimestamp:
                description: CompletionTimestamp records the time the Backup completed. The server's time is used for CompletionTimestamps
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Each Condition contains details for one aspect of the current state of the Backup.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              error:
                description: Error indicates the most recent error that has occurred. The error may not be permanent, so progress may continue after temporarily seeing an error.
                type: string
              progress:
                description: Used to internally track progress through the backup
                properties:
                  volumeBackups:
                    description: Progress of the individual volume backups, one for each VolumeSnapshot in the source Snapshot
                    items:
                      properties:
                        completionTimestamp:
                          description: CompletionTimestamp records the time the volume backup completed. The server's time is used for CompletionTimestamps
                          format: date-time
                          nullable: true
                          type: string
                        pvcUid:
                          description: k8s UID of the source app PVC
                          type: string
                        resticRepositoryPath:
                          description: Restic repository location (specified in the same format as the "-r" option of the restic CLI)
                          type: string
                        resticSnapshotID:
                          description: ID of the Restic snapshot created to represent this backup
                          type: string
                        resticVolumeBackupCompleted:
                          description: Set to true when the ResticVolumeBackup has completed successfully
                          type: boolean
                        resticVolumeBackupCreated:
                          description: Set to true when the ResticVolumeBackup for the VolumeSnapshot has been created
                          type: boolean
                        sourceVolumeSnapshot:
                          description: Namespaced name of the source VolumeSnapshot to be backed up
                          properties:
                            name:
                              type: string
                            namespace:
                              type: string
                          required:
                          - name
                          - namespace
                          type: object
                        volumeSnapshotContentCopyName:
                          description: Name of the temporary copy of the VolumeSnapshotContent
                          type: string
                        volumeSnapshotCopied:
                          description: Set to true when the temporary copies of the VolumeSnapshot and VolumeSnapshotContent have been created
                          type: boolean
                        volumeSnapshotCopyDeleted:
                          description: Set to true when the temporary copies of the VolumeSnapshot and VolumeSnapshotContent have been deleted
                          type: boolean
                        volumeSnapshotCopyName:
                          description: Name of the temporary copy of the VolumeSnapshot
                          type: string
                        volumeSnapshotCopyReadyToUse:
                          description: Set to true when the temporary copy of the VolumeSnapshot is ready to use
                          type: boolean
                      required:
                      - resticVolumeBackupCompleted
                      - resticVolumeBackupCreated
                      - sourceVolumeSnapshot
                      - volumeSnapshotContentCopyName
                      - volumeSnapshotCopied
                      - volumeSnapshotCopyDeleted
                      - volumeSnapshotCopyName
                      - volumeSnapshotCopyReadyToUse
                      type: object
                    type: array
                type: object
              sourceSnapshotName:
                description: Name of the snapshot to used for this backup (will be either the SnapshotRef if provided in the Backup spec, or a temporary snapshot name if SnapshotRef was not provided)
                type: string
              state:
                description: State indicates a high level summary of the Backup's state
                type: string
            required:
            - conditions
            - progress
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: disruptivebackups.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: DisruptiveBackup
    listKind: DisruptiveBackupList
    plural: disruptivebackups
    singular: disruptivebackup
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: DisruptiveBackup is the Schema for the disruptivebackups API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: DisruptiveBackupSpec defines the desired state of DisruptiveBackup
            properties:
              appVaultRef:
                description: Name of the AppVault to use as the target of the backup
                type: string
              applicationRef:
                description: Name of the Application to back up
                type: string
            required:
            - appVaultRef
            - applicationRef
            type: object
          status:
            description: DisruptiveBackupStatus defines the observed state of DisruptiveBackup
            properties:
              completionTimestamp:
                description: CompletionTimestamp is the server time when the DisruptiveBackup was completed.
                format: date-time
                nullable: true
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: exechooks.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: ExecHook
    listKind: ExecHookList
    plural: exechooks
    singular: exechook
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ExecHook is the Schema for the exechooks API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: "ExecHookSpec defines the desired state of ExecHook It represents the ExecutionHook defined in Astra Nautilus. It is associated with one application. Its purpose is to define the hook source, arguments and what to execute the script against. It contains criteria to match against application containers It can be enabled/disabled It contains parameters to pass into the script In Nautilus the script (hook source) is stored separately from the execution hook but in Neptune these are combined \n This will require the sync process to update all Execution Hooks when the Hook Source is updated in Nautilus This will prevent a direct user of Neptune from having re-usable scripts"
            properties:
              action:
                description: 'Action String that indicates which action the execution hook will run for, assuming the match criteria are met. values: snapshot, backup, restore and failover'
                enum:
                - snapshot
                - backup
                - restore
                - failover
                type: string
              applicationRef:
                description: ApplicationRef is the reference to the Application this exec hook is associated with
                type: string
              arguments:
                description: Arguments Array of strings for the arguments to pass to the exec hook source when executing on the container
                items:
                  type: string
                maxItems: 127
                minItems: 0
                type: array
              enabled:
                default: true
                description: Enabled allows the execution hook to be enabled or disabled.  Disabled execution hooks are not executed regardless of matching criteria.
                type: boolean
              hookSource:
                description: HookSource Base64 encoded string containing the source of a shell script which will be executed on matching containers
                maxLength: 131072
                minLength: 0
                type: string
              matchingCriteria:
                description: MatchingCriteria Array describing the match criteria for the execution hook to match against containers the hook will execute on
                items:
                  properties:
                    type:
                      description: Type indicates the matching criteria type specified by MatchingCriteriaType
                      type: string
                    value:
                      description: Value string containing a regex to match for the given match. Uses RE2 syntax described at https://golang.org/s/re2syntax
                      type: string
                  type: object
                maxItems: 10
                minItems: 0
                type: array
              stage:
                description: 'Stage String that indicates at what stage during the action the hook will be executed, values: pre and post'
                enum:
                - pre
                - post
                type: string
            required:
            - action
            - applicationRef
            - enabled
            - hookSource
            - stage
            type: object
          status:
            description: ExecHookStatus defines the observed state of ExecHook
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: exechooksruns.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: ExecHooksRun
    listKind: ExecHooksRunList
    plural: exechooksruns
    singular: exechooksrun
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .status.error
      name: Error
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ExecHooksRun is the Schema for the exechooksruns API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ExecHooksRunSpec defines the desired state of ExecHooksRun The ExecHooksRun exists to provide the results of running ExecHooks Action current operation being performed, possible values are snapshot, backup, restore and failover Stage the location within the action being performed, possible values are pre and post It will be responsible for getting all ExecHooks matching the application, stage and action It will be responsible for filtering the containers based on each ExecHook's matching criteria It will create an exec hook job for each matching container It will contain the results of each execution
            properties:
              action:
                description: Action The current action to run execution hooks for
                enum:
                - snapshot
                - backup
                - restore
                - failover
                type: string
              appArchivePath:
                description: AppArchivePath The specific location in AppVault of the resourcebackup to retrieve pods and containers from
                type: string
              appVaultRef:
                description: AppVaultRef The location of the resourcebackup to retrieve pods and containers from
                type: string
              applicationRef:
                description: ApplicationRef is the reference to the Application to execute hooks against
                type: string
              completionTimeout:
                description: CompletionTimeout specifies the time to wait for the entire ExecHooksRun to complete before returning timeout error. The default value is 40 minutes.
                type: string
              stage:
                description: Stage The current stage to run execution hooks for
                enum:
                - pre
                - post
                type: string
            required:
            - action
            - appArchivePath
            - appVaultRef
            - applicationRef
            - stage
            type: object
          status:
            description: ExecHooksRunStatus defines the observed state of ExecHooksRun
            properties:
              completionTimestamp:
                description: CompletionTimestamp The time that the ExecutionHooksRun completed
                format: date-time
                type: string
              conditions:
                description: Each Condition contains details for one aspect of the current state of the ExecHooksRun.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              error:
                description: Error indicates the most recent error that has occurred. The error may not be permanent, so progress may continue after temporarily seeing an error.
                type: string
              matchingContainers:
                description: MatchingContainers The status of each ExecHook that was run on each container
                items:
                  properties:
                    completionTimestamp:
                      description: CompletionTimestamp the time the exec hook run was finished regardless of failures
                      format: date-time
                      type: string
                    containerName:
                      description: ContainerName the name of the container the exec hook is run on
                      type: string
                    execHookRef:
                      description: ExecHookRef reference to the ExecHook being run
                      type: string
                    execHookUID:
                      description: ExecHookUID UID of the ExecHook being run
                      type: string
                    failures:
                      description: Failures list of failures that may occur when attempting to run the exec hook
                      items:
                        description: Failure - most of this data is used for posting events and notifications
                        properties:
                          error:
                            description: Error if a golang error was produced during the process of running an exec hook
                            type: string
                          exitCode:
                            description: ExitCode if the script was executed but returned a non-zero exit code it is captured here. Note that customers can define their own exit code with special meanings to them
                            type: integer
                          isExecError:
                            description: IsExecError this indicates that the script itself returned an error vs an error in other parts of the process such as copying the script onto the container
                            type: boolean
                          isTimeout:
                            description: IsTimeout indicates that the exec hook took too long and was abandoned, this is parity with Astra
                            type: boolean
                          stderr:
                            description: Stderr the stderr captured when executing the script
                            type: string
                          timeoutMinutes:
                            description: TimeoutMinutes indicates the amount of time that was given to the exec hook to run. In astra it is used for Activity/Event/Notification messages
                            type: integer
                        required:
                        - isExecError
                        - isTimeout
                        type: object
                      type: array
                    jobName:
                      description: JobName name of the job created to run an execution hook
                      type: string
                    namespace:
                      description: Namespace the namespace from the target application where the container is located
                      type: string
                    podName:
                      description: PodName the name of the pod where the exec hook will be run
                      type: string
                    podUID:
                      description: PodUID the uid of the pod where the exec hook will be run
                      type: string
                  required:
                  - containerName
                  - execHookRef
                  - execHookUID
                  - namespace
                  - podName
                  - podUID
                  type: object
                type: array
              state:
                description: State indicates a high level summary of the ExecHooksRun's state
                type: string
            required:
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: policies.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: Policy
    listKind: PolicyList
    plural: policies
    singular: policy
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Policy is the Schema for the policies API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PolicySpec defines the desired state of Policy
            properties:
              foo:
                description: Foo is an example field of Policy. Edit policy_types.go to remove/update
                type: string
            type: object
          status:
            description: PolicyStatus defines the observed state of Policy
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: pvccopies.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: PvcCopy
    listKind: PvcCopyList
    plural: pvccopies
    singular: pvccopy
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: PvcCopy is the Schema for the pvccopies API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PvcCopySpec defines the desired state of PvcCopy
            properties:
              namespace:
                description: cluster namespace in which the source and target PVCs belong to
                type: string
              sourcePVCRef:
                description: SourcePVCRef name of the source PVC where the data is copied from
                type: string
              targetPVCRef:
                description: TargetPVCRef name of the target PVC where the data is copied into
                type: string
            required:
            - namespace
            - sourcePVCRef
            - targetPVCRef
            type: object
          status:
            description: PvcCopyStatus defines the observed state of PvcCopy
            properties:
              completionTimestamp:
                description: CompletionTimestamp is the server time when the PvcErase is completed.
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Condition contains details for one aspect of the current state of this PvcErase job
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: pvcerases.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: PvcErase
    listKind: PvcEraseList
    plural: pvcerases
    singular: pvcerase
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: PvcErase is the Schema for the pvcerases API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PvcEraseSpec defines the desired state of PvcErase
            properties:
              pvcRef:
                description: PVCRef Config for the PVC to erase
                properties:
                  name:
                    type: string
                  namespace:
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - pvcRef
            type: object
          status:
            description: PvcEraseStatus defines the observed state of PvcErase
            properties:
              completionTimestamp:
                description: CompletionTimestamp is the server time when the PvcErase is completed.
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Condition contains details for one aspect of the current state of this PvcErase job
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: resourcebackups.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: ResourceBackup
    listKind: ResourceBackupList
    plural: resourcebackups
    singular: resourcebackup
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ResourceBackup is the Schema for the resourcebackups API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ResourceBackupSpec defines the desired state of ResourceBackup
            properties:
              appArchivePath:
                description: AppArchivePath is the path inside AppVault where the contents of this resourcebackup will go.
                type: string
              appVaultRef:
                description: AppVaultRef is the reference to the AppVault where the snapshot contents will go.
                type: string
              applicationRef:
                description: ApplicationRef is the unique name of the application this resourcebackup is for.
                type: string
              reclaimPolicy:
                description: ReclaimPolicy defines what happens to the resource contents in the app vault when the ResourceBackup CR is deleted Valid options are Retain, Delete (default).
                type: string
            type: object
          status:
            description: ResourceBackupStatus defines the observed state of ResourceBackup
            properties:
              appArchivePath:
                description: AppArchivePath is the path where the resourcebackup was archived in the AppVault.
                type: string
              completionTimestamp:
                description: CompletionTimestamp is the server time when the resourcebackup was completed.
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Each Condition contains details for one aspect of the current state of the ResourceBackup.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              error:
                description: Error indicates the most recent error that has occurred. The error may not be permanent, so progress may continue after temporarily seeing an error.
                type: string
              state:
                description: State indicates a high level summary of the ResourceBackup's state
                type: string
            required:
            - conditions
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: resourcedeletes.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: ResourceDelete
    listKind: ResourceDeleteList
    plural: resourcedeletes
    singular: resourcedelete
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ResourceDelete is the Schema for the resourcedeletes API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ResourceDeleteSpec defines the desired state of ResourceDelete
            properties:
              appArchivePath:
                description: AppArchivePath is the path inside AppVault where the contents of this collection will be read from.
                type: string
              appVaultRef:
                description: AppVaultRef is the reference to the AppVault where the snapshot contents will be read from.
                type: string
              exclusionResourceList:
                description: ExclusionResourceList is an optional list of objects to exclude from being deleted.
                items:
                  description: GroupKind defines a kubernetes object
                  properties:
                    group:
                      description: Group is the server time when the ResourceDelete is completed.
                      type: string
                    kind:
                      description: Kind
                      type: string
                  required:
                  - group
                  - kind
                  type: object
                type: array
              resourceFilter:
                description: ResourceFilter should be populated by the user if only certain resources must be restored in the target namespace
                properties:
                  resourceMatchers:
                    description: ResourceMatchers is a list of matchers where each matcher matches one or more resources
                    items:
                      properties:
                        groupKind:
                          description: GroupKind kubernetes group kind of the resource that has to be matched
                          type: string
                        labelSelector:
                          description: LabelSelector  is used to match a resource based on the metadata.labels field of the kubernetes resource
                          type: string
                        name:
                          description: Name kubernetes metadata.name field of the resource that must be matched.
                          type: string
                        namespace:
                          description: Namespace kubernetes metadata.namespace field of the resource that must be matched.
                          type: string
                        version:
                          description: Version of the kubernetes resource that has to be matched.
                          type: string
                      required:
                      - groupKind
                      type: object
                    type: array
                  resourceSelectionCriteria:
                    description: ResourceSelectionCriteria used to determine if the resources matching the provided resources matchers should be included into the collection or excluded from the collection.
                    enum:
                    - include
                    - exclude
                    type: string
                type: object
            type: object
          status:
            description: ResourceDeleteStatus defines the observed state of ResourceDelete
            properties:
              completionTimestamp:
                description: CompletionTimestamp is the server time when the ResourceDelete is completed.
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Condition contains details for one aspect of the current state of this ResourceDelete resource
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: resourcerestores.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: ResourceRestore
    listKind: ResourceRestoreList
    plural: resourcerestores
    singular: resourcerestore
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ResourceRestore is the Schema for the resourcerestores API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ResourceRestoreSpec defines the desired state of ResourceRestore
            properties:
              appArchivePath:
                description: AppArchivePath is the path inside AppVault where the contents of this collection will be read from.
                type: string
              appVaultRef:
                description: AppVaultRef is the reference to the AppVault where the snapshot contents will be read from.
                type: string
              namespaceMapping:
                description: NamespaceMapping is the mapping between source namespace to target namespace
                items:
                  properties:
                    source:
                      description: Source  namespace of a single resource in the collection
                      type: string
                    target:
                      description: Target namespace where the single resource will be cloned into
                      type: string
                  required:
                  - source
                  - target
                  type: object
                type: array
              resourceFilter:
                description: ResourceFilter should be populated by the user if only certain resources must be restored in the target namespace
                properties:
                  resourceMatchers:
                    description: ResourceMatchers is a list of matchers where each matcher matches one or more resources
                    items:
                      properties:
                        groupKind:
                          description: GroupKind kubernetes group kind of the resource that has to be matched
                          type: string
                        labelSelector:
                          description: LabelSelector  is used to match a resource based on the metadata.labels field of the kubernetes resource
                          type: string
                        name:
                          description: Name kubernetes metadata.name field of the resource that must be matched.
                          type: string
                        namespace:
                          description: Namespace kubernetes metadata.namespace field of the resource that must be matched.
                          type: string
                        version:
                          description: Version of the kubernetes resource that has to be matched.
                          type: string
                      required:
                      - groupKind
                      type: object
                    type: array
                  resourceSelectionCriteria:
                    description: ResourceSelectionCriteria used to determine if the resources matching the provided resources matchers should be included into the collection or excluded from the collection.
                    enum:
                    - include
                    - exclude
                    type: string
                type: object
            type: object
          status:
            description: ResourceRestoreStatus defines the observed state of ResourceRestore
            properties:
              completionTimestamp:
                description: CompletionTimestamp is the server time when the ResourceRestore is completed.
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Condition contains details for one aspect of the current state of this ResourceRestore resource
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: resourcesummaryuploads.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: ResourceSummaryUpload
    listKind: ResourceSummaryUploadList
    plural: resourcesummaryuploads
    singular: resourcesummaryupload
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ResourceSummaryUpload is the Schema for the resourcesummaryuploads API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ResourceSummaryUploadSpec defines the desired state of ResourceSummaryUpload
            properties:
              dataSourceRef:
                description: TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
                properties:
                  apiGroup:
                    description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                    type: string
                  kind:
                    description: Kind is the type of resource being referenced
                    type: string
                  name:
                    description: Name is the name of resource being referenced
                    type: string
                required:
                - kind
                - name
                type: object
                x-kubernetes-map-type: atomic
              hostNameAlias:
                type: string
              pushEndpoint:
                type: string
              pushToken:
                properties:
                  valueFromSecret:
                    description: ValueFromSecret indicates that the credential value should come from a secret.
                    properties:
                      key:
                        description: The key of the secret to select from. Must be a valid secret key.
                        type: string
                      name:
                        description: Name of the secret containing the value for this field. Must be in the same namespace.
                        type: string
                    required:
                    - key
                    - name
                    type: object
                required:
                - valueFromSecret
                type: object
              skipCertValidation:
                type: boolean
            required:
            - dataSourceRef
            - pushEndpoint
            - pushToken
            type: object
          status:
            description: ResourceSummaryUploadStatus defines the observed state of ResourceSummaryUpload
            properties:
              completionTimestamp:
                description: CompletionTimestamp is the server time when the resourcesummaryupload was completed.
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Each Condition contains details for one aspect of the current state of the ResourceSummaryUpload.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              error:
                type: string
              state:
                type: string
            required:
            - conditions
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: resticvolumebackups.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: ResticVolumeBackup
    listKind: ResticVolumeBackupList
    plural: resticvolumebackups
    singular: resticvolumebackup
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .status.error
      name: Error
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ResticVolumeBackup is the Schema for the resticvolumebackups API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ResticVolumeBackupSpec defines the desired state of ResticVolumeBackup
            properties:
              clonePVC:
                description: Config for the temporary clone PVC that will be created to access the snapshot contents (if dataSource is a VolumeSnapshot)
                properties:
                  metadata:
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                  spec:
                    properties:
                      accessModes:
                        items:
                          type: string
                        type: array
                      resources:
                        properties:
                          limits:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: ResourceList is a set of (resource name, quantity) pairs.
                            type: object
                          requests:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: ResourceList is a set of (resource name, quantity) pairs.
                            type: object
                        type: object
                      storageClassName:
                        type: string
                    type: object
                type: object
              dataSourceRef:
                description: Reference to the PVC or VolumeSnapshot to use as the source of the backup
                properties:
                  apiGroup:
                    description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                    type: string
                  kind:
                    description: Kind is the type of resource being referenced
                    type: string
                  name:
                    description: Name is the name of resource being referenced
                    type: string
                required:
                - kind
                - name
                type: object
                x-kubernetes-map-type: atomic
              reclaimPolicy:
                description: ReclaimPolicy defines what happens to the ResticSnapshot of a restic backup when the ResticVolumeBackup CR is deleted Valid options are Retain, Delete (default).
                type: string
              resticEnv:
                description: Env vars to be provided to the restic CLI (including any required credentials)
                items:
                  description: EnvVar represents an environment variable present in a Container.
                  properties:
                    name:
                      description: Name of the environment variable. Must be a C_IDENTIFIER.
                      type: string
                    value:
                      description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                      type: string
                    valueFrom:
                      description: Source for the environment variable's value. Cannot be used if value is not empty.
                      properties:
                        configMapKeyRef:
                          description: Selects a key of a ConfigMap.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the ConfigMap or its key must be defined
                              type: boolean
                          required:
                          - key
                          type: object
                          x-kubernetes-map-type: atomic
                        fieldRef:
                          description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                          properties:
                            apiVersion:
                              description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                              type: string
                            fieldPath:
                              description: Path of the field to select in the specified API version.
                              type: string
                          required:
                          - fieldPath
                          type: object
                          x-kubernetes-map-type: atomic
                        resourceFieldRef:
                          description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                          properties:
                            containerName:
                              description: 'Container name: required for volumes, optional for env vars'
                              type: string
                            divisor:
                              anyOf:
                              - type: integer
                              - type: string
                              description: Specifies the output format of the exposed resources, defaults to "1"
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            resource:
                              description: 'Required: resource to select'
                              type: string
                          required:
                          - resource
                          type: object
                          x-kubernetes-map-type: atomic
                        secretKeyRef:
                          description: Selects a key of a secret in the pod's namespace
                          properties:
                            key:
                              description: The key of the secret to select from.  Must be a valid secret key.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the Secret or its key must be defined
                              type: boolean
                          required:
                          - key
                          type: object
                          x-kubernetes-map-type: atomic
                      type: object
                  required:
                  - name
                  type: object
                type: array
              resticRepository:
                description: Restic repository location (specified in the same format as the "-r" option of the restic CLI)
                type: string
              resticVolumeMounts:
                description: ResticVolumeMounts contains information about the restic secrets to be mounted on the restic pod
                items:
                  properties:
                    mount:
                      description: VolumeMount describes a mounting of a Volume within a container.
                      properties:
                        mountPath:
                          description: Path within the container at which the volume should be mounted.  Must not contain ':'.
                          type: string
                        mountPropagation:
                          description: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
                          type: string
                        name:
                          description: This must match the Name of a Volume.
                          type: string
                        readOnly:
                          description: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
                          type: boolean
                        subPath:
                          description: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
                          type: string
                        subPathExpr:
                          description: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
                          type: string
                      required:
                      - mountPath
                      - name
                      type: object
                    source:
                      description: "Adapts a Secret into a volume. \n The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling."
                      properties:
                        defaultMode:
                          description: 'defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                          format: int32
                          type: integer
                        items:
                          description: items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                          items:
                            description: Maps a string key to a path within a volume.
                            properties:
                              key:
                                description: key is the key to project.
                                type: string
                              mode:
                                description: 'mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                format: int32
                                type: integer
                              path:
                                description: path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
                                type: string
                            required:
                            - key
                            - path
                            type: object
                          type: array
                        optional:
                          description: optional field specify whether the Secret or its keys must be defined
                          type: boolean
                        secretName:
                          description: 'secretName is the name of the secret in the pod''s namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                          type: string
                      type: object
                  type: object
                type: array
            required:
            - dataSourceRef
            - resticEnv
            - resticRepository
            type: object
          status:
            description: ResticVolumeBackupStatus defines the observed state of ResticVolumeBackup
            properties:
              clonePVCName:
                description: Name of the temporary clone PVC created for Restic to copy from (if dataSourceRef is a VolumeSnapshot)
                type: string
              completionTimestamp:
                description: CompletionTimestamp records the time the ResticVolumeBackup completed. The server's time is used for CompletionTimestamps
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Each Condition contains details for one aspect of the current state of the ResticVolumeBackup.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              error:
                description: Error indicates the most recent error that has occurred. The error may not be permanent, so progress may continue after temporarily seeing an error.
                type: string
              resticDeleteJobName:
                description: Name of the Job created to run Restic delete
                type: string
              resticJobName:
                description: Name of the Job created to run Restic
                type: string
              resticSnapshotID:
                description: ID of the Restic snapshot created to represent this backup
                type: string
              state:
                description: State indicates a high level summary of the ResticVolumeBackup's state
                type: string
            required:
            - conditions
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: resticvolumerestores.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: ResticVolumeRestore
    listKind: ResticVolumeRestoreList
    plural: resticvolumerestores
    singular: resticvolumerestore
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ResticVolumeRestore is the Schema for the resticvolumerestores API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ResticVolumeRestoreSpec defines the desired state of ResticVolumeRestore
            properties:
              resticEnv:
                description: Env vars to be provided to the restic CLI (including any required credentials)
                items:
                  description: EnvVar represents an environment variable present in a Container.
                  properties:
                    name:
                      description: Name of the environment variable. Must be a C_IDENTIFIER.
                      type: string
                    value:
                      description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                      type: string
                    valueFrom:
                      description: Source for the environment variable's value. Cannot be used if value is not empty.
                      properties:
                        configMapKeyRef:
                          description: Selects a key of a ConfigMap.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the ConfigMap or its key must be defined
                              type: boolean
                          required:
                          - key
                          type: object
                          x-kubernetes-map-type: atomic
                        fieldRef:
                          description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                          properties:
                            apiVersion:
                              description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                              type: string
                            fieldPath:
                              description: Path of the field to select in the specified API version.
                              type: string
                          required:
                          - fieldPath
                          type: object
                          x-kubernetes-map-type: atomic
                        resourceFieldRef:
                          description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                          properties:
                            containerName:
                              description: 'Container name: required for volumes, optional for env vars'
                              type: string
                            divisor:
                              anyOf:
                              - type: integer
                              - type: string
                              description: Specifies the output format of the exposed resources, defaults to "1"
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            resource:
                              description: 'Required: resource to select'
                              type: string
                          required:
                          - resource
                          type: object
                          x-kubernetes-map-type: atomic
                        secretKeyRef:
                          description: Selects a key of a secret in the pod's namespace
                          properties:
                            key:
                              description: The key of the secret to select from.  Must be a valid secret key.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the Secret or its key must be defined
                              type: boolean
                          required:
                          - key
                          type: object
                          x-kubernetes-map-type: atomic
                      type: object
                  required:
                  - name
                  type: object
                type: array
              resticRepository:
                description: Restic repository location (specified in the same format as the "-r" option of the restic CLI)
                type: string
              resticSnapshotID:
                description: ID of the Restic snapshot that needs to be restored
                type: string
              resticVolumeMounts:
                description: ResticVolumeMounts contains information about the restic secrets to be mounted on the restic pod
                items:
                  properties:
                    mount:
                      description: VolumeMount describes a mounting of a Volume within a container.
                      properties:
                        mountPath:
                          description: Path within the container at which the volume should be mounted.  Must not contain ':'.
                          type: string
                        mountPropagation:
                          description: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
                          type: string
                        name:
                          description: This must match the Name of a Volume.
                          type: string
                        readOnly:
                          description: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
                          type: boolean
                        subPath:
                          description: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
                          type: string
                        subPathExpr:
                          description: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
                          type: string
                      required:
                      - mountPath
                      - name
                      type: object
                    source:
                      description: "Adapts a Secret into a volume. \n The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling."
                      properties:
                        defaultMode:
                          description: 'defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                          format: int32
                          type: integer
                        items:
                          description: items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                          items:
                            description: Maps a string key to a path within a volume.
                            properties:
                              key:
                                description: key is the key to project.
                                type: string
                              mode:
                                description: 'mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                format: int32
                                type: integer
                              path:
                                description: path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
                                type: string
                            required:
                            - key
                            - path
                            type: object
                          type: array
                        optional:
                          description: optional field specify whether the Secret or its keys must be defined
                          type: boolean
                        secretName:
                          description: 'secretName is the name of the secret in the pod''s namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                          type: string
                      type: object
                  type: object
                type: array
              targetPVCRef:
                description: Config for the PVC to restore the restic snapshot into
                properties:
                  name:
                    type: string
                  namespace:
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - resticEnv
            - resticRepository
            - resticSnapshotID
            - targetPVCRef
            type: object
          status:
            description: ResticVolumeRestoreStatus defines the observed state of ResticVolumeRestore
            properties:
              resticJobCleanedUp:
                description: Indicates whether the Restic job has been cleaned up
                type: boolean
              resticJobInfo:
                description: Information about the restic job
                properties:
                  bytesComplete:
                    description: bytes of data copied into the volume so far
                    format: int64
                    type: integer
                  name:
                    type: string
                  namespace:
                    type: string
                  status:
                    description: status of the current restic restore
                    type: string
                required:
                - bytesComplete
                - name
                - namespace
                - status
                type: object
            required:
            - resticJobCleanedUp
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: restores.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: Restore
    listKind: RestoreList
    plural: restores
    singular: restore
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Restore is the Schema for the restores API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RestoreSpec defines the desired state of Restore
            properties:
              foo:
                description: Foo is an example field of Restore. Edit restore_types.go to remove/update
                type: string
            type: object
          status:
            description: RestoreStatus defines the observed state of Restore
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: schedules.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: Schedule
    listKind: ScheduleList
    plural: schedules
    singular: schedule
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Schedule is the Schema for the schedules API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ScheduleSpec defines the desired state of Schedule
            properties:
              appVaultRef:
                description: Name of the AppVault to use as the target of the backup/snapshot
                type: string
              applicationRef:
                description: ApplicationRef is the reference to the Application.
                type: string
              backupRetention:
                description: Indicates how many backups to retain. Zero indicates that no backups should be created.
                maxLength: 63
                minLength: 0
                pattern: ^(0|([1-9][0-9]*))$
                type: string
              dayOfMonth:
                description: Numeric value indicating the day of the month (1-31) to execute the schedule. This field is only present if granularity is set to "monthly".
                type: string
              dayOfWeek:
                description: Numeric value indicating the day of the week (0-7) to execute the schedule. This field is only present if granularity is set to "weekly".
                type: string
              enabled:
                default: true
                description: Indicates if a schedule is active.
                type: boolean
              granularity:
                description: Indicates the granularity of the schedule.
                enum:
                - hourly
                - daily
                - weekly
                - monthly
                - custom
                type: string
              hour:
                description: Numeric value indicating the hour of the day (0 - 23) to execute the schedule. This field is present if granularity is set to "daily", "weekly", or "monthly".
                type: string
              minute:
                description: Numeric value indicating the minute of the hour (0 - 59) to execute the schedule. This field is present if granularity is set to "hourly", "daily", "weekly", or "monthly".
                type: string
              recurrenceRule:
                description: string containing an RFC-5545 Section 3.8.5.3. Recurrence Rule. For the DTSTART parameter, only UTC timestamps (denoted by the "Z" suffix) are supported, and only timestamps before the current time are supported. For the RECUR rule parts, "FREQ" and "INTERVAL" are the only rule parts supported. For the FREQ rule part, "MINUTELY" and "HOURLY" are the only values supported. This field is only present if granularity is set to "custom".
                type: string
              replicate:
                default: false
                description: Indicates if the schedule should trigger AppMirror replication for each snapshot. Only takes effect if the application has an AppMirror relationship defined.
                type: boolean
              snapshotRetention:
                description: Indicates how many snapshots to retain. Zero indicates that no snapshots should be created.
                maxLength: 63
                minLength: 0
                pattern: ^(0|([1-9][0-9]*))$
                type: string
            required:
            - appVaultRef
            - backupRetention
            - granularity
            - snapshotRetention
            type: object
          status:
            description: ScheduleStatus defines the observed state of Schedule
            properties:
              lastScheduleTime:
                format: date-time
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: shutdownsnapshots.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: ShutdownSnapshot
    listKind: ShutdownSnapshotList
    plural: shutdownsnapshots
    singular: shutdownsnapshot
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .status.error
      name: Error
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ShutdownSnapshot is the Schema for the shutdownsnapshots API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ShutdownSnapshotSpec defines the desired state of ShutdownSnapshot
            properties:
              appVaultRef:
                description: AppVaultRef is the reference to the AppVault where the snapshot contents will go.
                type: string
              applicationRef:
                description: ApplicationRef is the reference to the Application being snapshotted.
                type: string
              reclaimPolicy:
                description: ReclaimPolicy defines what happens to the AppArchive of a snapshot when the snapshot CR is deleted Valid options are Retain, Delete (default).
                type: string
              volumeSnapshotsCreatedTimeout:
                description: VolumeSnapshotsCreatedTimeout specifies the time to wait for all VolumeSnapshots CreationTime to be set before returning timeout error. The default value is 5 minutes.
                type: string
              volumeSnapshotsReadyToUseTimeout:
                description: VolumeSnapshotsReadyToUseTimeout specifies the time to wait for Snapshot CR to complete before returning timeout error. The default value is 30 minutes.
                type: string
            type: object
          status:
            description: ShutdownSnapshotStatus defines the observed state of ShutdownSnapshot
            properties:
              appArchivePath:
                description: AppArchivePath is the path where the snapshot was archived in the AppVault.
                type: string
              completionTimestamp:
                description: CompletionTimestamp is the server time when the snapshot was completed.
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Each Condition contains details for one aspect of the current state of the Snapshot.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              error:
                description: Error indicates the most recent error that has occurred. The error may not be permanent, so progress may continue after temporarily seeing an error.
                type: string
              state:
                description: State indicates a high level summary of the Snapshot's state
                type: string
              volumeSnapshots:
                description: Used to internally track volume snapshot progress
                items:
                  description: NamespacedName creating this, since the k8s.io/apimachinery/pkg/types.NamespacedName does not have json tags associated with it.
                  properties:
                    name:
                      type: string
                    namespace:
                      type: string
                  required:
                  - name
                  - namespace
                  type: object
                type: array
            required:
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: snapshotinplacerestores.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: SnapshotInplaceRestore
    listKind: SnapshotInplaceRestoreList
    plural: snapshotinplacerestores
    singular: snapshotinplacerestore
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .status.error
      name: Error
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: SnapshotInplaceRestore is the Schema for the snapshotinplacerestores API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SnapshotInplaceRestoreSpec defines the desired state of SnapshotInplaceRestore
            properties:
              appArchivePath:
                description: AppArchivePath is the path inside AppVault where the snapshot contents are stored.
                type: string
              appVaultRef:
                description: AppVaultRef is the reference to the AppVault where the snapshot contents are stored.
                type: string
              namespaceMapping:
                description: NamespaceMapping is the mapping between source namespace to target namespace
                items:
                  properties:
                    source:
                      description: Source  namespace of a single resource in the collection
                      type: string
                    target:
                      description: Target namespace where the single resource will be cloned into
                      type: string
                  required:
                  - source
                  - target
                  type: object
                type: array
            type: object
          status:
            description: SnapshotInplaceRestoreStatus defines the observed state of SnapshotInplaceRestore
            properties:
              completionTimestamp:
                description: CompletionTimestamp records the time the Restore completed. The server's time is used for CompletionTimestamps
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Each Condition contains details for one aspect of the current state of the SnapshotInplace Restore.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              error:
                description: Error indicates the most recent error that has occurred. The error may not be permanent, so progress may continue after temporarily seeing an error.
                type: string
              state:
                description: 'INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file State indicates a high level summary of the SnapshotInplace Restore''s state'
                type: string
            required:
            - conditions
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: snapshotrestores.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: SnapshotRestore
    listKind: SnapshotRestoreList
    plural: snapshotrestores
    singular: snapshotrestore
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .status.error
      name: Error
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: SnapshotRestore is the Schema for the snapshotrestores API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SnapshotRestoreSpec defines the desired state of SnapshotRestore
            properties:
              appArchivePath:
                description: AppArchivePath is the path inside AppVault where the snapshot contents are stored.
                type: string
              appVaultRef:
                description: AppVaultRef is the reference to the AppVault where the snapshot contents are stored.
                type: string
              namespaceMapping:
                description: NamespaceMapping is the mapping between source namespace to target namespace
                items:
                  properties:
                    source:
                      description: Source  namespace of a single resource in the collection
                      type: string
                    target:
                      description: Target namespace where the single resource will be cloned into
                      type: string
                  required:
                  - source
                  - target
                  type: object
                type: array
              resourceFilter:
                description: ResourceFilter should be populated by the user if only certain resources must be restored in the target namespace
                properties:
                  resourceMatchers:
                    description: ResourceMatchers is a list of matchers where each matcher matches one or more resources
                    items:
                      properties:
                        groupKind:
                          description: GroupKind kubernetes group kind of the resource that has to be matched
                          type: string
                        labelSelector:
                          description: LabelSelector  is used to match a resource based on the metadata.labels field of the kubernetes resource
                          type: string
                        name:
                          description: Name kubernetes metadata.name field of the resource that must be matched.
                          type: string
                        namespace:
                          description: Namespace kubernetes metadata.namespace field of the resource that must be matched.
                          type: string
                        version:
                          description: Version of the kubernetes resource that has to be matched.
                          type: string
                      required:
                      - groupKind
                      type: object
                    type: array
                  resourceSelectionCriteria:
                    description: ResourceSelectionCriteria used to determine if the resources matching the provided resources matchers should be included into the collection or excluded from the collection.
                    enum:
                    - include
                    - exclude
                    type: string
                type: object
              storageClassMapping:
                description: StorageClassMapping defines a mapping from a storageClass present in the source application to the assignment in the restored application (clone)
                items:
                  properties:
                    source:
                      description: Source  storageClass that is assigned to one of the PVCs in the source application
                      type: string
                    target:
                      description: Target storageClass that is assigned to the same PVC in the cloned/restored application
                      type: string
                  required:
                  - source
                  - target
                  type: object
                type: array
            type: object
          status:
            description: SnapshotRestoreStatus defines the observed state of SnapshotRestore
            properties:
              completionTimestamp:
                description: CompletionTimestamp records the time the Restore completed. The server's time is used for CompletionTimestamps
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Condition contains details for one aspect of the current state of this PvcErase job
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              error:
                description: Error indicates the most recent error that has occurred. The error may not be permanent, so progress may continue after temporarily seeing an error.
                type: string
              state:
                description: State indicates a high level summary of the SnapshotRestore operations state
                type: string
              warnings:
                description: Warnings contains warnings that have occurred during execution
                items:
                  type: string
                type: array
            required:
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: snapshots.management.astra.netapp.io
spec:
  group: management.astra.netapp.io
  names:
    kind: Snapshot
    listKind: SnapshotList
    plural: snapshots
    singular: snapshot
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .status.error
      name: Error
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Snapshot is the Schema for the snapshots API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SnapshotSpec defines the desired state of Snapshot
            properties:
              appVaultRef:
                description: AppVaultRef is the reference to the AppVault where the snapshot contents will go.
                type: string
              applicationRef:
                description: ApplicationRef is the reference to the Application being snapshotted.
                type: string
              reclaimPolicy:
                description: ReclaimPolicy defines what happens to the AppArchive of a snapshot when the snapshot CR is deleted Valid options are Retain, Delete (default).
                type: string
              volumeSnapshotsCreatedTimeout:
                description: VolumeSnapshotsCreatedTimeout specifies the time to wait for all VolumeSnapshots CreationTime to be set before returning timeout error. The default value is 5 minutes.
                type: string
              volumeSnapshotsReadyToUseTimeout:
                description: VolumeSnapshotsReadyToUseTimeout specifies the time to wait for Snapshot CR to complete before returning timeout error. The default value is 30 minutes.
                type: string
            type: object
          status:
            description: SnapshotStatus defines the observed state of Snapshot
            properties:
              appArchivePath:
                description: AppArchivePath is the path where the snapshot was archived in the AppVault.
                type: string
              completionTimestamp:
                description: CompletionTimestamp is the server time when the snapshot was completed.
                format: date-time
                nullable: true
                type: string
              conditions:
                description: Each Condition contains details for one aspect of the current state of the Snapshot.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              error:
                description: Error indicates the most recent error that has occurred. The error may not be permanent, so progress may continue after temporarily seeing an error.
                type: string
              state:
                description: State indicates a high level summary of the Snapshot's state
                type: string
              volumeSnapshots:
                description: Used to internally track volume snapshot progress
                items:
                  description: NamespacedName creating this, since the k8s.io/apimachinery/pkg/types.NamespacedName does not have json tags associated with it.
                  properties:
                    name:
                      type: string
                    namespace:
                      type: string
                  required:
                  - name
                  - namespace
                  type: object
                type: array
            required:
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: neptune
  name: neptune-autosupportbundle
  namespace: neptune-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: neptune
  name: neptune-controller-manager
  namespace: neptune-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: neptune
  name: neptune-exechook
  namespace: neptune-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: neptune
  name: neptune-resourcebackup
  namespace: neptune-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: neptune
  name: neptune-resourcedelete
  namespace: neptune-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: neptune
  name: neptune-resourcerestore
  namespace: neptune-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: neptune
  name: neptune-resourcesummaryupload
  namespace: neptune-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: neptune
  name: neptune-leader-election-role
  namespace: neptune-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  name: neptune-manager-role
  namespace: neptune-system
rules:
- apiGroups:
  - '*'
  resources:
  - secrets
  verbs:
  - get
  - list
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - batch
  resources:
  - jobs/finalizers
  verbs:
  - create
  - delete
  - update
- apiGroups:
  - batch
  resources:
  - jobs/status
  verbs:
  - get
- apiGroups:
  - management.astra.netapp.io
  resources:
  - applications
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - applications/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - applications/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - appmirrorrelationships
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - appmirrorrelationships/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - appmirrorrelationships/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - appmirrorupdates
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - appmirrorupdates/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - appmirrorupdates/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - appvaults
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - appvaults/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - appvaults/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - autosupportbundles
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - autosupportbundles/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - autosupportbundles/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - backupinplacerestores
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - backupinplacerestores/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - backupinplacerestores/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - backuprestores
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - backuprestores/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - backuprestores/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - backups
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - backups/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - backups/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - disruptivebackups
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - disruptivebackups/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - disruptivebackups/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - policies
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - policies/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - policies/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - pvccopies
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - pvccopies/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - pvccopies/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - pvcerases
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - pvcerases/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - pvcerases/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resourcebackups
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resourcebackups/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resourcebackups/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resourcedeletes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resourcedeletes/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resourcedeletes/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resourcerestores
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resourcerestores/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resourcerestores/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resourcesummaryuploads
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resourcesummaryuploads/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resourcesummaryuploads/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resticvolumebackups
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resticvolumebackups/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resticvolumebackups/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resticvolumerestores
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resticvolumerestores/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - resticvolumerestores/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - schedules
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - schedules/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - schedules/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - shutdownsnapshots
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - shutdownsnapshots/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - shutdownsnapshots/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - snapshotinplacerestores
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - snapshotinplacerestores/finalizers
  verbs:
  - create
  - get
  - list
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - snapshotinplacerestores/status
  verbs:
  - get
  - list
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - snapshotrestores
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - snapshotrestores/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - snapshotrestores/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - snapshots
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - snapshots/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - snapshots/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: neptune-autosupportbundle
rules:
- apiGroups:
  - '*'
  resourceNames:
  - kube-system
  resources:
  - namespaces
  verbs:
  - get
- apiGroups:
  - '*'
  resources:
  - pods
  verbs:
  - list
- apiGroups:
  - '*'
  resources:
  - pods/log
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: neptune-exechook
rules:
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: neptune-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - create
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods/finalizers
  verbs:
  - delete
  - update
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - batch
  resources:
  - jobs/finalizers
  verbs:
  - create
  - delete
  - update
- apiGroups:
  - batch
  resources:
  - jobs/status
  verbs:
  - get
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - list
  - patch
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - autosupportbundleschedules
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - autosupportbundleschedules/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - autosupportbundleschedules/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - exechooks
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - exechooks/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - exechooks/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - exechooksruns
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - management.astra.netapp.io
  resources:
  - exechooksruns/finalizers
  verbs:
  - update
- apiGroups:
  - management.astra.netapp.io
  resources:
  - exechooksruns/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - snapshot.storage.k8s.io
  resources:
  - volumesnapshotclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - snapshot.storage.k8s.io
  resources:
  - volumesnapshotcontents
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - watch
- apiGroups:
  - snapshot.storage.k8s.io
  resources:
  - volumesnapshotcontents/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - snapshot.storage.k8s.io
  resources:
  - volumesnapshots
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - snapshot.storage.k8s.io
  resources:
  - volumesnapshots/finalizers
  verbs:
  - update
- apiGroups:
  - snapshot.storage.k8s.io
  resources:
  - volumesnapshots/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - trident.netapp.io
  resources:
  - tridentactionmirrorupdates
  verbs:
  - create
  - get
  - list
  - update
  - watch
- apiGroups:
  - trident.netapp.io
  resources:
  - tridentbackends
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - trident.netapp.io
  resources:
  - tridentmirrorrelationships
  verbs:
  - create
  - get
  - list
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/instance: metrics-reader
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: neptune
  name: neptune-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/instance: proxy-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: neptune
  name: neptune-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: neptune-resourcebackup
rules:
- nonResourceURLs:
  - '*'
  verbs:
  - get
  - list
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: neptune-resourcedelete
rules:
- nonResourceURLs:
  - '*'
  verbs:
  - delete
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: neptune-resourcerestore
rules:
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: neptune-resourcesummaryupload
rules:
- nonResourceURLs:
  - '*'
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/instance: leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: neptune
  name: neptune-leader-election-rolebinding
  namespace: neptune-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: neptune-leader-election-role
subjects:
- kind: ServiceAccount
  name: neptune-controller-manager
  namespace: neptune-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: neptune
  name: neptune-manager-rolebinding
  namespace: neptune-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: neptune-manager-role
subjects:
- kind: ServiceAccount
  name: neptune-controller-manager
  namespace: neptune-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: neptune
  name: neptune-autosupportbundle
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: neptune-autosupportbundle
subjects:
- kind: ServiceAccount
  name: neptune-autosupportbundle
  namespace: neptune-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: neptune
  name: neptune-autosupportbundle-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: neptune-metrics-reader
subjects:
- kind: ServiceAccount
  name: neptune-autosupportbundle
  namespace: neptune-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: neptune
  name: neptune-exechook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: neptune-exechook
subjects:
- kind: ServiceAccount
  name: neptune-exechook
  namespace: neptune-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: neptune
  name: neptune-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: neptune-manager-role
subjects:
- kind: ServiceAccount
  name: neptune-controller-manager
  namespace: neptune-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/instance: proxy-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: neptune
  name: neptune-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: neptune-proxy-role
subjects:
- kind: ServiceAccount
  name: neptune-controller-manager
  namespace: neptune-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: neptune
  name: neptune-resourcebackup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: neptune-resourcebackup
subjects:
- kind: ServiceAccount
  name: neptune-resourcebackup
  namespace: neptune-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: neptune
  name: neptune-resourcedelete
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: neptune-resourcedelete
subjects:
- kind: ServiceAccount
  name: neptune-resourcedelete
  namespace: neptune-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: neptune
  name: neptune-resourcerestore
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: neptune-resourcerestore
subjects:
- kind: ServiceAccount
  name: neptune-resourcerestore
  namespace: neptune-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: neptune
  name: neptune-resourcesummaryupload
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: neptune-resourcesummaryupload
subjects:
- kind: ServiceAccount
  name: neptune-resourcesummaryupload
  namespace: neptune-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: neptune
    app.kubernetes.io/instance: controller-manager-metrics-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: neptune
    control-plane: controller-manager
  name: neptune-controller-manager-metrics-service
  namespace: neptune-system
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
