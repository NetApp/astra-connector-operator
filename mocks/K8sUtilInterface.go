// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	controllerutil "sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"

	kubernetes "k8s.io/client-go/kubernetes"

	mock "github.com/stretchr/testify/mock"
)

// K8sUtilInterface is an autogenerated mock type for the K8sUtilInterface type
type K8sUtilInterface struct {
	mock.Mock
}

// CreateOrUpdateResource provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *K8sUtilInterface) CreateOrUpdateResource(_a0 context.Context, _a1 client.Object, _a2 client.Object, _a3 controllerutil.MutateFn) (string, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateResource")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.Object, client.Object, controllerutil.MutateFn) (string, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.Object, client.Object, controllerutil.MutateFn) string); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.Object, client.Object, controllerutil.MutateFn) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResource provides a mock function with given fields: _a0, _a1
func (_m *K8sUtilInterface) DeleteResource(_a0 context.Context, _a1 client.Object) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.Object) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsCRDInstalled provides a mock function with given fields: _a0
func (_m *K8sUtilInterface) IsCRDInstalled(_a0 string) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsCRDInstalled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// K8sClientset provides a mock function with given fields:
func (_m *K8sUtilInterface) K8sClientset() kubernetes.Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for K8sClientset")
	}

	var r0 kubernetes.Interface
	if rf, ok := ret.Get(0).(func() kubernetes.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubernetes.Interface)
		}
	}

	return r0
}

// RESTGet provides a mock function with given fields: _a0
func (_m *K8sUtilInterface) RESTGet(_a0 string) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RESTGet")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VersionGet provides a mock function with given fields:
func (_m *K8sUtilInterface) VersionGet() (string, string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VersionGet")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func() (string, string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewK8sUtilInterface creates a new instance of K8sUtilInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewK8sUtilInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *K8sUtilInterface {
	mock := &K8sUtilInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
