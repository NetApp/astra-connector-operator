// Code generated by mockery v2.19.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ClusterRegisterUtil is an autogenerated mock type for the ClusterRegisterUtil type
type ClusterRegisterUtil struct {
	mock.Mock
}

// GetAPITokenFromSecret provides a mock function with given fields: secretName
func (_m *ClusterRegisterUtil) GetAPITokenFromSecret(secretName string) (string, string, error) {
	ret := _m.Called(secretName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(secretName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(secretName)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(secretName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsClusterManaged provides a mock function with given fields:
func (_m *ClusterRegisterUtil) IsClusterManaged() (bool, string, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetHttpClient provides a mock function with given fields: disableTls, astraHost
func (_m *ClusterRegisterUtil) SetHttpClient(disableTls bool, astraHost string) error {
	ret := _m.Called(disableTls, astraHost)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, string) error); ok {
		r0 = rf(disableTls, astraHost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClusterRegisterUtil interface {
	mock.TestingT
	Cleanup(func())
}

// NewClusterRegisterUtil creates a new instance of ClusterRegisterUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClusterRegisterUtil(t mockConstructorTestingTNewClusterRegisterUtil) *ClusterRegisterUtil {
	mock := &ClusterRegisterUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
